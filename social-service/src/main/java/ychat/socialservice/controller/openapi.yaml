openapi: "3.0.3"
info:
  title: "y_chat API"
  description: "y_chat API"
  version: "1.0.0"
servers:
  - url: "https://y_chat"
paths:
  /users:
    post:
      summary: "POST users"
      operationId: "createUser"
      parameters:
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
        required: true
      responses:
        "200":
          description: "OK"
  /users/{userId}:
    get:
      summary: "GET users/{userId}"
      operationId: "getUserProfile"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
    put:
      summary: "PUT users/{userId}"
      operationId: "updateUserProfile"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
        required: true
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE users/{userId}"
      operationId: "deleteUser"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
  /users/{userId}/blockedUsers:
    get:
      summary: "GET users/{userId}/blockedUsers"
      operationId: "getBlockedUsers"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdList"
    post:
      summary: "POST users/{userId}/blockedUsers"
      operationId: "addBlockedUser"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "blockUserId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE users/{userId}/blockedUsers"
      operationId: "removeBlockedUser"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "unblockUserId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
  /users/{userId}/blockedUsers/{checkUserId}:
    get:
      summary: "GET users/{userId}/blockedUsers/{checkUserId}"
      operationId: "checkBlockedUser"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "checkUserId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "boolean"
  /users/{userId}/settings:
    get:
      summary: "GET users/{userId}/settings"
      operationId: "getUserSettings"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
    put:
      summary: "PUT users/{userId}/settings"
      operationId: "updateUserSettings"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettings"
        required: true
      responses:
        "200":
          description: "OK"
  /chats:
    post:
      summary: "POST chats"
      operationId: "createDirectChat"
      parameters:
        - name: "fstUserId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "sndUserId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
                format: "uuid"
  /chats/{chatId}:
    get:
      summary: "GET chats/{chatId}"
      operationId: "getType"
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatType"
  /chats/{chatId}/members:
    get:
      summary: "GET chats/{chatId}/members"
      operationId: "getMembers"
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdList"
  /chats/{chatId}/members/{userId}:
    get:
      summary: "GET chats/{chatId}/members/{userId}"
      operationId: "getStatus"
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatStatus"
    put:
      summary: "PUT chats/{chatId}/members/{userId}"
      operationId: "setStatus"
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatStatus"
        required: true
      responses:
        "200":
          description: "OK"
  /groups:
    post:
      summary: "POST groups"
      operationId: "createGroup"
      parameters:
        - name: "creatorUserId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
                format: "uuid"
  /groups/{groupId}:
    get:
      summary: "GET groups/{groupId}"
      operationId: "getProfile"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupProfile"
    put:
      summary: "PUT groups/{groupId}"
      operationId: "updateProfile"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupProfile"
        required: true
      responses:
        "200":
          description: "OK"
  /groups/{groupId}/members:
    get:
      summary: "GET groups/{groupId}/members"
      operationId: "getGroupMembers"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdList"
    post:
      summary: "POST groups/{groupId}/members"
      operationId: "addGroupMember"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "DELETE groups/{groupId}/members"
      operationId: "removeGroupMember"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
  /groups/{groupId}/members/{userId}:
    get:
      summary: "GET groups/{groupId}/members/{userId}"
      operationId: "getRole"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupRole"
    put:
      summary: "PUT groups/{groupId}/members/{userId}"
      operationId: "updateRole"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRole"
        required: true
      responses:
        "200":
          description: "OK"
components:
  schemas:
    UserProfile:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        phoneNumber:
          type: "string"
        profileDescription:
          type: "string"
    HttpHeaders:
      type: "object"
      properties: { }
    ResponseEntity:
      type: "object"
      properties:
        headers:
          $ref: "#/components/schemas/HttpHeaders"
    UserSettings:
      type: "object"
      properties:
        twoFactorAuth:
          type: "boolean"
        readReceipts:
          type: "boolean"
    GroupProfile:
      type: "object"
      properties:
        name:
          type: "string"
        profileDescription:
          type: "string"
    IdList:
      type: "array"
      items:
        type: "string"
        format: "uuid"
    ChatType:
      type: "string"
      enum:
        - "GROUP_CHAT"
        - "DIRECT_CHAT"
    ChatStatus:
      type: "string"
      enum:
        - "NOT_A_MEMBER"
        - "DELETED"
        - "ARCHIVED"
        - "ACTIVE"
    GroupRole:
      type: "string"
      enum:
        - "GROUP_MEMBER"
        - "GROUP_ADMIN"