############## messaging service database ##############

apiVersion: v1
kind: Secret
metadata:
  name: messaging-mongo-secret
type: Opaque
data:
  # test and test (Base64 encoded) for now
  mongo-user: dGVzdA==
  mongo-password: dGVzdA==

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: messaging-mongo-config
data:
  mongo-url: "messaging-mongo-service"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-mongo-deployment
  labels:
    app: messaging-mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: messaging-mongo
  template:
    metadata:
      labels:
        app: messaging-mongo
    spec:
      containers:
        - name: mongodb
          image: mongo:5.0
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: messaging-mongo-secret
                  key: mongo-user
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: messaging-mongo-secret
                  key: mongo-password

---

apiVersion: v1
kind: Service
metadata:
  name: messaging-mongo-service # also change in mongo-config if you change the name here
spec:
  type: ClusterIP
  selector:
    app: messaging-mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---

############## messaging service ##############

apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-service-deployment
  labels:
    app: messaging-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: messaging-service
  strategy:
    type: RollingUpdate # if a new container is available in docker registry the update will gradually roll out
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: messaging-service
    spec:
      containers:
        - name: messaging-service
          image: mrsarius/yc-messaging:latest
          ports:
            - containerPort: 8080 # port of spring boot inside the container
          env:
            - name: spring.data.mongodb.host
              valueFrom:
                configMapKeyRef:
                  name: messaging-mongo-config
                  key: mongo-url
            - name: spring.data.mongodb.port
              value: "27017"
            - name: spring.data.mongodb.username
              valueFrom:
                secretKeyRef:
                  name: messaging-mongo-secret
                  key: mongo-user
            - name: spring.data.mongodb.password
              valueFrom:
                secretKeyRef:
                  name: messaging-mongo-secret
                  key: mongo-password
            - name: spring.data.mongodb.database
              value: "messaging"
            - name: spring.data.mongodb.authentication-database
              value: "admin"
            - name: spring.kafka.bootstrap-servers
              value: "my-cluster-kafka-bootstrap.kafka:9092"
            - name: spring.kafka.consumer.group-id
              value: "messaging"
            - name: spring.kafka.consumer.auto-offset-reset
              value: "earliest"
            - name: spring.kafka.listener.poll-timeout
              value: "3000"
            - name: spring.kafka.listener.concurrency
              value: "3"
---
# this service exposes the test-service to your localhost:8080. Of course, later the only exposed service will be the api-gateway
apiVersion: v1
kind: Service
metadata:
  name: messaging-service
spec:
  type: ClusterIP
  selector:
    app: messaging-service
  ports:
    - protocol: TCP
      port: 8080 # port to expose to the outside
      targetPort: 8080 # port of spring boot inside the container
