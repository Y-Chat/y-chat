############## social service database ##############

apiVersion: v1
kind: Secret
metadata:
  name: social-pg-secret
type: Opaque
data:
  # test and test (Base64 encoded) for now
  pg-user: dGVzdA==
  pg-password: dGVzdA==

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: social-pg-config
data:
  pg-url: "jdbc:postgresql://social-pg-service:5432/social-db"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: social-pg-deployment
  labels:
    app: social-pg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: social-pg
  template:
    metadata:
      labels:
        app: social-pg
    spec:
      containers:
        - name: postgres
          image: postgres:16.1
          ports:
            - containerPort: 5432
          env:
            - name: TZ
              value: "UTC"
            - name: POSTGRES_DB
              value: "social-db"
            - name: POSTGRES_INITDB_ARGS
              value: "--locale=en_US.utf8"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: social-pg-secret
                  key: pg-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: social-pg-secret
                  key: pg-password

---

apiVersion: v1
kind: Service
metadata:
  name: social-pg-service # also change in mongo-config if you change the name here
spec:
  type: ClusterIP
  selector:
    app: social-pg
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---

############## social service ##############

apiVersion: apps/v1
kind: Deployment
metadata:
  name: social-service-deployment
  labels:
    app: social-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: social-service
  strategy:
    type: RollingUpdate # if a new container is available in docker registry the update will gradually roll out
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: social-service
    spec:
      containers:
        - name: social-service
          image: mrsarius/yc-social:latest
          ports:
            - containerPort: 8080 # port of spring boot inside the container
          env:
            - name: TZ
              value: "UTC"
            - name: SERVER_PORT
              value: "8080"
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: social-pg-config
                  key: pg-url
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: social-pg-secret
                  key: pg-user
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: social-pg-secret
                  key: pg-password
---
# this service exposes the test-service to your localhost:8080. Of course, later the only exposed service will be the api-gateway
apiVersion: v1
kind: Service
metadata:
  name: social-service
spec:
  type: ClusterIP
  selector:
    app: social-service
  ports:
    - protocol: TCP
      port: 8080 # port to expose to the outside
      targetPort: 8080 # port of spring boot inside the container
