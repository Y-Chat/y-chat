openapi: 3.0.3
info:
  title: Y-Chat API
  description: Y-Chat API
  version: 1.0.0
servers:
  - url: "http://localhost:3000/api/v1"
security:
  - bearerAuth: []
paths:
  /auth/validateToken:
    get:
      summary: Validate the jwt token
      operationId: validateToken
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /auth/resetPassword:
    get:
      summary: Request a password reset mail
      operationId: requestPasswordResetMail
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /auth-internal/validateToken:
    get:
      summary: Validate the jwt token
      operationId: validateTokenInternal
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /social/user:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    get:
      summary: Get a user
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    delete:
      summary: Delete own user
      operationId: deleteUser
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /social/group:
    get:
      summary: Get a group
      operationId: getGroup
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/GroupResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      summary: Create a group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          $ref: '#/components/responses/GroupResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    delete:
      summary: Delete a group
      operationId: deleteGroup
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /social/chat:
    post:
      summary: Start a chat with another user
      operationId: createChat
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ChatResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    patch:
      summary: Update a chat with another user
      operationId: updateChat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - id
              properties:
                id:
                  type: string
                  format: ObjectId
                archived:
                  type: boolean
                deleted:
                  type: boolean
      responses:
        '200':
          $ref: '#/components/responses/ChatResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    get:
      summary: Get chats
      operationId: getChats
      parameters:
        - $ref: '#/components/parameters/archived'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/ChatsResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /social/blockedUser:
    get:
      summary: Get all users blocked by a user
      operationId: getBlockedUsers
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/BlockedUsersResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      summary: Add a user to the blocklist
      operationId: addUserToBlacklist
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    delete:
      summary: Remove a user from the blocklist
      operationId: removeUserFromBlacklist
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /social/groupMember:
    get:
      summary: Get all users in a group
      operationId: getGroupUsers
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          $ref: '#/components/responses/GroupUsersResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      summary: Add a user to a group
      operationId: addUserToGroup
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    delete:
      summary: Remove a user from the group
      operationId: removeUserFromGroup
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /social-internal/isMemberOfChat:
    get:
      summary: Get if a user is a member of a chat
      operationId: isMemeberOfChat
      security: []
      parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/IsMemberOfChatResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /messaging/message:
    post:  
      summary: Send a message
      operationId: sendMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          $ref: '#/components/responses/MessageResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /messaging/messages:
    get:  
      summary: Get messages of a chat
      operationId: getMessages
      parameters:
        - $ref: '#/components/parameters/chatId'
        - $ref: '#/components/parameters/fromDate'
      responses:
        '200':
          $ref: '#/components/responses/MessagesResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /media/upload:
    post:
      summary: Post media
      operationId: postMedia
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  format: binary
      responses:
        '200':
          $ref: '#/components/responses/MediaDataResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /media/data:
    get:
      summary: Get media data
      operationId: getMedia
      parameters:
        - $ref: '#/components/parameters/mediaDataId'
      responses:
        '200':
          $ref: '#/components/responses/MediaResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /payment/funds:
    get:
      summary: Get fund balance
      operationId: getFunds
      parameters:
        - $ref: '#/components/parameters/mediaDataId'
      responses:
        '200':
          $ref: '#/components/responses/AccountBalanceResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /payment/handleWebhook:
    post:
      summary: Handle webhook
      operationId: handleWebhook
      security: []
      responses:
        '200':
          $ref: '#/components/responses/EmptyResponse'
        '400':
            $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    archived:
      in: query
      required: false
      name: archived
      schema:
        type: boolean
    page:
      in: query
      required: false
      name: page
      schema:
        type: integer
        format: int32
    pageSize:
      in: query
      required: false
      name: pageSize
      schema:
        type: integer
        format: int32
    groupId:
      in: query
      required: true
      name: groupId
      schema:
        type: string
        format: ObjectId
    userId:
      in: query
      required: true
      name: userId
      schema:
        type: string
        format: ObjectId
    mediaDataId:
      in: query
      required: true
      name: mediaDataId
      schema:
        type: string
        format: ObjectId
    chatId:
      in: query
      required: true
      name: chatId
      schema:
        type: string
        format: ObjectId
    fromDate:
      in: query
      required: true
      name: fromDate
      schema:
        type: string
        format: date-time
  schemas:
    Chat:
      type: object
      required:
        - id
        - archived
        - deleted
      properties:
        id:
          type: string
          format: ObjectId
          readOnly: true
        archived:
          type: boolean
        deleted:
          type: boolean
        user:
          $ref: '#/components/schemas/User'
        group:
          $ref: '#/components/schemas/Group'
    Group:
      type: object
      required:
        - id
        - chatId
        - name
        - pictureId
        - description
      properties:
        id:
          type: string
          format: ObjectId
          readOnly: true
        chatId:
          type: string
          format: ObjectId
        pictureId:
          type: string
          format: ObjectId
        name:
          type: string
        description:
          type: string
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - pictureId
        - description
      properties:
        id:
          type: string
          format: ObjectId
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        pictureId:
          type: string
          format: ObjectId
        description:
          type: string
    AccountBalance:
      type: object
      required:
        - id
        - userId
        - amount
      properties:
        id:
          type: string
          format: ObjectId
          readOnly: true
        userId:
          type: string
          format: ObjectId
        amount:
          type: number
    Transaction:
      type: object
      required:
        - id
        - fromUserId
        - toUserId
        - amount
        - timestamp
      properties:
        id:
          type: string
          format: ObjectId
          readOnly: true
        fromUserId:
          type: string
          format: ObjectId
        toUserId:
          type: string
          format: ObjectId
        amount:
          type: number
          minimum: 0
        timestamp:
          type: string
          format: date-time  
          readOnly: true
    MediaData:
      type: object
      required:
        - id
        - uploaderId
        - fileName
        - timestamp
      properties:
        id:
          type: string
          format: ObjectId
          readOnly: true
        uploaderId:
          type: string
          format: ObjectId
          readOnly: true
        fileName:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
    NewMessage:
      type: object
      required:
        - chatId
        - message
      properties:
        chatId:
          type: string
          format: ObjectId
        moneyAmount:
          type: number
          minimum: 0
        mediaId:
          type: string
          format: ObjectId
        message:
          type: string
    Message:
      type: object
      required:
        - id
        - senderId
        - chatId
        - sentTimestamp
        - message
      properties:
        id:
          type: string
          format: ObjectId
          readOnly: true
        senderId:
          type: string
          format: ObjectId
          readOnly: true
        chatId:
          type: string
          format: ObjectId
        transactionId:
          type: string
          format: ObjectId
          readOnly: true
        mediaId:
          type: string
          format: ObjectId
        sentTimestamp:
          type: string
          format: date-time
          readOnly: true
        message:
          type: string
    PageInfo:
      type: object
      required:
        - page
        - pageSize
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    IsMemberOfChatResponse:
      description: Is member of chat response
      content:
        application/json:
          schema:
            type: object
            required:
              - userId
              - chatId
              - isMember
            properties:
              userId:
                type: string
                format: ObjectId
              chatId:
                type: string
                format: ObjectId
              isMember:
                type: boolean
    ChatResponse:
      description: Chat response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chat'
    ChatsResponse:
      description: Chats response
      content:
        application/json:
          schema:
            type: object
            required:
              - chats
              - pageInfo
            properties:
              chats:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
              pageInfo:
                $ref: '#/components/schemas/PageInfo'
    GroupUsersResponse:
      description: Group users response
      content:
        application/json:
          schema:
            type: object
            required:
              - users
              - pageInfo
            properties:
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              pageInfo:
                $ref: '#/components/schemas/PageInfo'
    BlockedUsersResponse:
      description: Blocked users response
      content:
        application/json:
          schema:
            type: object
            required:
              - users
              - pageInfo
            properties:
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              pageInfo:
                $ref: '#/components/schemas/PageInfo'
    UserResponse:
      description: User response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    GroupResponse:
      description: Group response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    AccountBalanceResponse:
      description: Account balance response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccountBalance'
    MediaResponse:
      description: Media response
      content:
        application/octet-stream:
            schema:
              type: string
              format: binary
    MediaDataResponse:
      description: Media response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MediaData'
    MessagesResponse:
      description: Message response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Message'
    MessageResponse:
      description: Message response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    EmptyResponse:
      description: Empty response
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: Bad request
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: Forbidden
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 403
            message: Unauthorized
    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: Not found
    AlreadyExistsResponse:
      description: The resource already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 409
            message: Already Exists
    UnprocessableEntityResponse:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 422
            message: Unproccessable Entity
